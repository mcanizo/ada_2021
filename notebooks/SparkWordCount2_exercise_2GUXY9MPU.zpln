{
  "paragraphs": [
    {
      "text": "%md\n# Spark WordCount tutorial\nThis is a small tutorial to show how Apache Spark works. In this lesson, we will use an [Apache Zeppelin notebook](https://zeppelin.incubator.apache.org/) to interact with Spark and execute the wordcount exercise, which consists on counting how many times a word appears within a given text.\n\n*Please note this is an unofficial demo and tutorial.*\n\n### Apache Spark\nApache Spark is a fast and general engine for big data processing, with built-in modules for streaming, SQL, machine learning and graph processing.\nMore details can be found here [http://spark.apache.org](http://spark.apache.org/).",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:22.246",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eSpark WordCount tutorial\u003c/h1\u003e\n\u003cp\u003eThis is a small tutorial to show how Apache Spark works. In this lesson, we will use an \u003ca href\u003d\"https://zeppelin.incubator.apache.org/\"\u003eApache Zeppelin notebook\u003c/a\u003e to interact with Spark and execute the wordcount exercise, which consists on counting how many times a word appears within a given text.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003ePlease note this is an unofficial demo and tutorial.\u003c/em\u003e\u003c/p\u003e\n\u003ch3\u003eApache Spark\u003c/h3\u003e\n\u003cp\u003eApache Spark is a fast and general engine for big data processing, with built-in modules for streaming, SQL, machine learning and graph processing.\u003cbr /\u003e\nMore details can be found here \u003ca href\u003d\"http://spark.apache.org/\"\u003ehttp://spark.apache.org\u003c/a\u003e.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882246_1463782252",
      "id": "paragraph_1642005276698_1382065343",
      "dateCreated": "2022-01-13 16:21:22.246",
      "status": "READY"
    },
    {
      "text": "%sh \npwd\nls -l",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:22.246",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/sh",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "/opt/zeppelin\ntotal 58276\ndrwxr-xr-x  2 root     root     4096 Feb 10  2021 bin\ndrwxrwxr-x  1 root     root     4096 Jan 13 15:39 conf\ndrwxr-xr-x 37 root     root     4096 Feb 10  2021 interpreter\ndrwxr-xr-x  3 root     root     4096 Feb 10  2021 k8s\ndrwxr-xr-x  3 root     root    20480 Feb 10  2021 lib\n-rw-r--r--  1 root     root    65026 Dec 20  2020 LICENSE\ndrwxr-xr-x  2 root     root     4096 Feb 10  2021 licenses\ndrwxrwxr-x  2 root     root     4096 Feb 10  2021 logs\ndrwxrwxrwx  1 root     root      512 Jan 13  2022 notebook\n-rw-r--r--  1 root     root     5808 Dec 20  2020 NOTICE\ndrwxr-xr-x  4 root     root     4096 Feb 10  2021 plugins\n-rw-r--r--  1 root     root     1438 Dec 20  2020 README.md\ndrwxrwxr-x  2 root     root     4096 Feb 10  2021 run\ndrwxr-xr-x  3 zeppelin root     4096 Jan 13 15:35 webapps\n-rw-r--r--  1 root     root 29695353 Dec 20  2020 zeppelin-web-0.9.0.war\n-rw-r--r--  1 root     root 29843280 Dec 20  2020 zeppelin-web-angular-0.9.0.war\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882246_921844008",
      "id": "paragraph_1642002472246_1193135330",
      "dateCreated": "2022-01-13 16:21:22.246",
      "status": "READY"
    },
    {
      "text": "%md\n## 1.- Load the text file\nUse the SparkContext (sc) to load the data thought the textFile method.",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:22.246",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e1.- Load the text file\u003c/h2\u003e\n\u003cp\u003eUse the SparkContext (sc) to load the data thought the textFile method.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882246_1120728782",
      "id": "paragraph_1642005270480_1673222509",
      "dateCreated": "2022-01-13 16:21:22.246",
      "status": "READY"
    },
    {
      "text": "%spark\nval dataRdd \u003d sc.textFile(\"/zeppelin/data/wordcount2.txt\");\ndataRdd.take(10).foreach(println)",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:22.247",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "word count from Wikipedia the free encyclopedia\nthe word count is the number of words in a document or passage of text Word counting may be needed when a text\nis required to stay within certain numbers of words This may particularly be the case in academia legal\nproceedings journalism and advertising Word count is commonly used by translators to determine the price for\nthe translation job Word counts may also be used to calculate measures of readability and to measure typing\nand reading speeds usually in words per minute When converting character counts to words a measure of five or\nsix characters to a word is generally used Contents Details and variations of definition Software In fiction\nIn non fiction See also References Sources External links Details and variations of definition\nThis section does not cite any references or sources Please help improve this section by adding citations to\nreliable sources Unsourced material may be challenged and removed\n\u001b[1m\u001b[34mdataRdd\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[String]\u001b[0m \u003d /zeppelin/data/wordcount.txt MapPartitionsRDD[1] at textFile at \u003cconsole\u003e:26\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882247_1419772724",
      "id": "paragraph_1642002573920_339913181",
      "dateCreated": "2022-01-13 16:21:22.247",
      "status": "READY"
    },
    {
      "text": "%md\n## 2.- Get each word of the text file\nAll the words are separated by a white space, so we split each line by \" \" to get all the words. As the output of each split is an array of words, we use the \"_flatmap_\" method to return all the words separated intead or returnig a list of words.\n\nHere is an example to show how map and flatMap methods return different data types:\n\n```\nmap(line \u003d\u003e line.split(\" \")) -\u003e [\n                                    [\"word\", \"count\", \"from\", \"Wikipedia\", \"the\", \"free\", \"encyclopedia\"]]\n                                    [\"the\", \"word\", \"count\", \"is\", \"the\", \"number\", \"of\"...]\n                                ]\n\nflatMap(line \u003d\u003e line.split(\" \")) -\u003e [\"word\", \"count\", \"from\", \"Wikipedia\", \"the\", \"free\", \"encyclopedia\", \"the\", \"word\", \"count\", \"is\", \"the\", \"number\", \"of\"...]\n```",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:22.247",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e2.- Get each word of the text file\u003c/h2\u003e\n\u003cp\u003eAll the words are separated by a white space, so we split each line by \u0026quot; \u0026quot; to get all the words. As the output of each split is an array of words, we use the \u0026ldquo;\u003cem\u003eflatmap\u003c/em\u003e\u0026rdquo; method to return all the words separated intead or returnig a list of words.\u003c/p\u003e\n\u003cp\u003eHere is an example to show how map and flatMap methods return different data types:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003emap(line \u003d\u0026gt; line.split(\u0026quot; \u0026quot;)) -\u0026gt; [\n                                    [\u0026quot;word\u0026quot;, \u0026quot;count\u0026quot;, \u0026quot;from\u0026quot;, \u0026quot;Wikipedia\u0026quot;, \u0026quot;the\u0026quot;, \u0026quot;free\u0026quot;, \u0026quot;encyclopedia\u0026quot;]]\n                                    [\u0026quot;the\u0026quot;, \u0026quot;word\u0026quot;, \u0026quot;count\u0026quot;, \u0026quot;is\u0026quot;, \u0026quot;the\u0026quot;, \u0026quot;number\u0026quot;, \u0026quot;of\u0026quot;...]\n                                ]\n\nflatMap(line \u003d\u0026gt; line.split(\u0026quot; \u0026quot;)) -\u0026gt; [\u0026quot;word\u0026quot;, \u0026quot;count\u0026quot;, \u0026quot;from\u0026quot;, \u0026quot;Wikipedia\u0026quot;, \u0026quot;the\u0026quot;, \u0026quot;free\u0026quot;, \u0026quot;encyclopedia\u0026quot;, \u0026quot;the\u0026quot;, \u0026quot;word\u0026quot;, \u0026quot;count\u0026quot;, \u0026quot;is\u0026quot;, \u0026quot;the\u0026quot;, \u0026quot;number\u0026quot;, \u0026quot;of\u0026quot;...]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882247_697657325",
      "id": "paragraph_1642005778076_1794374357",
      "dateCreated": "2022-01-13 16:21:22.247",
      "status": "READY"
    },
    {
      "text": "%spark\n",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:51.141",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "word\ncount\nfrom\nWikipedia\nthe\nfree\nencyclopedia\nthe\nword\ncount\n\u001b[1m\u001b[34msplitDataRdd\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[String]\u001b[0m \u003d MapPartitionsRDD[2] at flatMap at \u003cconsole\u003e:26\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882247_306353718",
      "id": "paragraph_1642003560434_1548679836",
      "dateCreated": "2022-01-13 16:21:22.247",
      "status": "READY"
    },
    {
      "text": "%md\n## 3.- Replace punctuation characters\nBe carefull with this new text since it contains punctuation characters. We must delete them as they will be attached to some of our words (e. g. done.). Thus, the sum of the words will not be done correctly as same words with and without attached punctuation characters will not match.\n\n*Hint*: use the ``replace`` and ``replaceAll`` method within the ``map`` function to replace these characters.\n",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:22.247",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e3.- Replace punctuation characters\u003c/h2\u003e\n\u003cp\u003eBe carefull with this new text since it contains punctuation characters. We must delete them as they will be attached to some of our words (e. g. done.). Thus, the sum of the words will not be done correctly as same words with and without attached punctuation characters will not match.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eHint\u003c/em\u003e: use the \u003ccode\u003ereplace\u003c/code\u003e and \u003ccode\u003ereplaceAll\u003c/code\u003e method within the \u003ccode\u003emap\u003c/code\u003e function to replace these characters.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882247_367672026",
      "id": "paragraph_1642089522006_907303609",
      "dateCreated": "2022-01-13 16:21:22.247",
      "status": "READY"
    },
    {
      "text": "%spark\n",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:54.821",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mcleanedDataRdd\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[String]\u001b[0m \u003d MapPartitionsRDD[7] at map at \u003cconsole\u003e:27\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882248_1823508184",
      "id": "paragraph_1642089266529_56529359",
      "dateCreated": "2022-01-13 16:21:22.248",
      "status": "READY"
    },
    {
      "text": "%md\n## 4.- Filter words with length \u003c\u003d 3\nOften, shorter words suchs as prepositions are the most used ones althoug we might want to ignore them.\n\n*Hint*: use the method ``filter`` to filter words that do not satisfy this condition\n",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:22.248",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e4.- Filter words with length \u0026lt;\u003d 3\u003c/h2\u003e\n\u003cp\u003eOften, shorter words suchs as prepositions are the most used ones althoug we might want to ignore them.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eHint\u003c/em\u003e: use the method \u003ccode\u003efilter\u003c/code\u003e to filter words that do not satisfy this condition\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882248_781738471",
      "id": "paragraph_1642090122459_455383047",
      "dateCreated": "2022-01-13 16:21:22.248",
      "status": "READY"
    },
    {
      "text": "%spark\n",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:57.604",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[1m\u001b[34mfilterdDataRdd\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[String]\u001b[0m \u003d MapPartitionsRDD[10] at filter at \u003cconsole\u003e:26\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882248_1474539266",
      "id": "paragraph_1642090121475_1127659697",
      "dateCreated": "2022-01-13 16:21:22.248",
      "status": "READY"
    },
    {
      "text": "%md\n## 5.- Associate a count of 1 to each word\nTo count how many time a word appears in the text file, we need to first create a tuple (key/value) where _key\u003dword_ and _value\u003d1_ so that we can then make the sum.",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:22.248",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e5.- Associate a count of 1 to each word\u003c/h2\u003e\n\u003cp\u003eTo count how many time a word appears in the text file, we need to first create a tuple (key/value) where \u003cem\u003ekey\u003dword\u003c/em\u003e and \u003cem\u003evalue\u003d1\u003c/em\u003e so that we can then make the sum.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882248_1828116169",
      "id": "paragraph_1642006220565_891540538",
      "dateCreated": "2022-01-13 16:21:22.248",
      "status": "READY"
    },
    {
      "text": "%spark\n",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:22:02.211",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(word,1)\n(count,1)\n(from,1)\n(Wikipedia,1)\n(free,1)\n(encyclopedia,1)\n(word,1)\n(count,1)\n(number,1)\n(words,1)\n\u001b[1m\u001b[34mwordTupleRdd\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[(String, Int)]\u001b[0m \u003d MapPartitionsRDD[11] at map at \u003cconsole\u003e:28\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882248_217807256",
      "id": "paragraph_1642003580337_517589409",
      "dateCreated": "2022-01-13 16:21:22.249",
      "status": "READY"
    },
    {
      "text": "%md\n## 6.- Count the words\nCount how many times each word appears. To do so, we have to group the data by key (word) and then add all they values (1s).\n\nUse the _reduceByKey_ method to apply a function to each group.",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:22.249",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e6.- Count the words\u003c/h2\u003e\n\u003cp\u003eCount how many times each word appears. To do so, we have to group the data by key (word) and then add all they values (1s).\u003c/p\u003e\n\u003cp\u003eUse the \u003cem\u003ereduceByKey\u003c/em\u003e method to apply a function to each group.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882249_1368013021",
      "id": "paragraph_1642006595575_707279339",
      "dateCreated": "2022-01-13 16:21:22.249",
      "status": "READY"
    },
    {
      "text": "%spark\n",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:22:07.746",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(Unix,1)\n(reading,1)\n(this,2)\n(under,1)\n(Short,1)\n(term,1)\n(Fantasy,1)\n(results,2)\n(There,1)\n(todays,1)\n\u001b[1m\u001b[34mwordCountRdd\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[(String, Int)]\u001b[0m \u003d ShuffledRDD[12] at reduceByKey at \u003cconsole\u003e:26\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882249_317603033",
      "id": "paragraph_1642004661745_1425659853",
      "dateCreated": "2022-01-13 16:21:22.249",
      "status": "READY"
    },
    {
      "text": "%md\n# 7.- Order words by count DESC",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:22.249",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003e7.- Order words by count DESC\u003c/h1\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882249_1548014775",
      "id": "paragraph_1642006883236_653061522",
      "dateCreated": "2022-01-13 16:21:22.249",
      "status": "READY"
    },
    {
      "text": "%spark\n",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:22:11.869",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Words ordered in DESC mode\n(word,24)\n(words,21)\n(count,11)\n(text,8)\n(such,7)\n(counting,6)\n(length,5)\n(also,5)\n(rules,5)\n(that,5)\n\n\nWords ordered in ASC mode\n(Unix,1)\n(reading,1)\n(under,1)\n(Short,1)\n(term,1)\n(Fantasy,1)\n(There,1)\n(todays,1)\n(noun,1)\n(improve,1)\n\u001b[1m\u001b[34mdescOrderedWordCountRdd\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[(String, Int)]\u001b[0m \u003d MapPartitionsRDD[17] at sortBy at \u003cconsole\u003e:27\n\u001b[1m\u001b[34mascOrderedWordCountRdd\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[(String, Int)]\u001b[0m \u003d MapPartitionsRDD[22] at sortBy at \u003cconsole\u003e:29\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882249_1366825432",
      "id": "paragraph_1642004837788_486761026",
      "dateCreated": "2022-01-13 16:21:22.249",
      "status": "READY"
    },
    {
      "text": "%md\n## 8.- All in one statement\nYou can concatenate the functions using a \".\" between them",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:22.250",
      "progress": 0,
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "fontSize": 9.0,
        "editorHide": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e8.- All in one statement\u003c/h2\u003e\n\u003cp\u003eYou can concatenate the functions using a \u0026ldquo;.\u0026rdquo; between them\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882250_437504927",
      "id": "paragraph_1642088720064_747850888",
      "dateCreated": "2022-01-13 16:21:22.250",
      "status": "READY"
    },
    {
      "text": "%spark\n",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:22:23.106",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(word,24)\n(words,21)\n(count,11)\n(text,8)\n(such,7)\n(counting,6)\n(length,5)\n(also,5)\n(rules,5)\n(that,5)\n\u001b[1m\u001b[34mwords\u001b[0m: \u001b[1m\u001b[32mUnit\u001b[0m \u003d ()\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882250_102863918",
      "id": "paragraph_1642004975171_1323514245",
      "dateCreated": "2022-01-13 16:21:22.250",
      "status": "READY"
    },
    {
      "text": "%spark\n",
      "user": "anonymous",
      "dateUpdated": "2022-01-13 16:21:22.250",
      "progress": 0,
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1642090882250_1150666292",
      "id": "paragraph_1642008114441_773370074",
      "dateCreated": "2022-01-13 16:21:22.250",
      "status": "READY"
    }
  ],
  "name": "SparkWordCount2_exercise",
  "id": "2GUXY9MPU",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}